import streamlit as st
import pandas as pd
import joblib
import xgboost as xgb

# Carrega o modelo treinado
modelo = joblib.load('modelo_xgb.pkl')

# Define os campos que o modelo espera e seus nomes amig√°veis
campos = {
    'perfil_vaga.estado': 'Estado da vaga',
    'perfil_vaga.cidade': 'Cidade da vaga',
    'perfil_vaga.regiao': 'Regi√£o da vaga',
    'perfil_vaga.nivel_academico': 'N√≠vel acad√™mico da vaga',
    'perfil_vaga.nivel_ingles': 'N√≠vel de ingl√™s da vaga',
    'perfil_vaga.nivel_espanhol': 'N√≠vel de espanhol da vaga',
    'perfil_vaga.faixa_etaria': 'Faixa et√°ria da vaga',
    'perfil_vaga.horario_trabalho': 'Hor√°rio de trabalho',
    'perfil_vaga.areas_atuacao': '√Årea de atua√ß√£o da vaga',
    'perfil_vaga.vaga_especifica_para_pcd': 'Vaga espec√≠fica para PCD?',
    'informacoes_basicas.tipo_contratacao': 'Tipo de contrata√ß√£o',
    'informacoes_basicas.prioridade_vaga': 'Prioridade da vaga',
    'informacoes_profissionais.area_atuacao': '√Årea de atua√ß√£o do candidato',
    'informacoes_profissionais.nivel_profissional': 'N√≠vel profissional do candidato',
    'formacao_e_idiomas.nivel_academico': 'N√≠vel acad√™mico do candidato',
    'formacao_e_idiomas.nivel_ingles': 'N√≠vel de ingl√™s do candidato',
    'formacao_e_idiomas.nivel_espanhol': 'N√≠vel de espanhol do candidato',
    'formacao_e_idiomas.outro_idioma': 'Outro idioma',
    'formacao_e_idiomas.instituicao_ensino_superior': 'Institui√ß√£o de ensino superior',
    'formacao_e_idiomas.ano_conclusao': 'Ano de conclus√£o da forma√ß√£o'
}

# T√≠tulo
st.title('üß† Previs√£o de Contrata√ß√£o - Decision AI')

# Inputs do usu√°rio
st.markdown("### Preencha os dados da vaga e do candidato")
entrada = {}

for campo, nome_amigavel in campos.items():
    if campo == 'perfil_vaga.vaga_especifica_para_pcd':
        valor = st.selectbox(nome_amigavel, ['N√£o', 'Sim'])
        entrada[campo] = True if valor == 'Sim' else False
    elif campo == 'formacao_e_idiomas.ano_conclusao':
        entrada[campo] = st.number_input(nome_amigavel, min_value=1950, max_value=2050, step=1)
    else:
        entrada[campo] = st.text_input(nome_amigavel)

# Bot√£o para prever
if st.button('Fazer Previs√£o'):
    df_input = pd.DataFrame([entrada])

    # Codifica√ß√£o one-hot
    df_input = pd.get_dummies(df_input)

    # Garante que todas as colunas esperadas pelo modelo estejam presentes
    colunas_esperadas = modelo.get_booster().feature_names
    colunas_faltantes = [col for col in colunas_esperadas if col not in df_input.columns]

    # Cria colunas faltantes com valor 0
    df_faltantes = pd.DataFrame(0, index=[0], columns=colunas_faltantes)
    df_input = pd.concat([df_input, df_faltantes], axis=1)

    # Reordena as colunas conforme esperado pelo modelo
    df_input = df_input[colunas_esperadas]

    # Previs√£o
    proba = modelo.predict_proba(df_input)[0][1]
    classe = modelo.predict(df_input)[0]

    st.markdown(f"### Resultado:")
    st.write(f"**Classe prevista:** {'Contratado' if classe == 1 else 'N√£o contratado'}")
    st.write(f"**Probabilidade de contrata√ß√£o:** {proba:.2%}")
    st.balloons()  # Anima√ß√£o de bal√µes para celebrar a previs√£o
    st.success("Previs√£o realizada com sucesso!")


